
-- Declaración de variables para el loop
DECLARE @Counter INT = 1;

-- Crear una tabla temporal para GUIDs pregenerados (mejora el rendimiento)
CREATE TABLE TempGuids (
    Id INT IDENTITY(1,1),
    GuidValue UNIQUEIDENTIFIER
);

-- Generar GUIDs previamente
;WITH Numbers AS (
    SELECT TOP 100000 ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS N
    FROM master.dbo.spt_values t1
    CROSS JOIN master.dbo.spt_values t2
)
INSERT INTO TempGuids (GuidValue)
SELECT NEWID()
FROM Numbers;

-- Insertar los 100,000 registros
;WITH Numbers AS (
    SELECT TOP 100000 
        ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS N,
        NEWID() AS RandomGuid
    FROM master.dbo.spt_values t1
    CROSS JOIN master.dbo.spt_values t2
)
INSERT INTO tipos_de_datos_test (
    ColInt, ColBigInt, ColSmallInt, ColTinyInt, 
    ColDecimal, ColNumeric, ColFloat, ColReal,
    ColMoney, ColSmallMoney, ColChar, ColVarChar,
    ColText, ColNChar, ColNVarChar, ColNText,
    ColBinary, ColVarBinary, ColImage, ColDate,
    ColDateTime, ColSmallDateTime, ColDateTime2,
    ColTime, ColDateTimeOffset, ColBit,
    ColUniqueIdentifier, ColXml, ColJson
)
SELECT 
    ABS(CHECKSUM(NEWID())) % 2147483647 AS ColInt, -- Número aleatorio para INT
    ABS(CAST(CAST(NEWID() AS VARBINARY) AS BIGINT)) AS ColBigInt,
    ABS(CHECKSUM(NEWID())) % 32767 AS ColSmallInt,
    ABS(CHECKSUM(NEWID())) % 255 AS ColTinyInt,
    CAST(RAND(CHECKSUM(NEWID())) * 10000 AS DECIMAL(10,2)) AS ColDecimal,
    CAST(RAND(CHECKSUM(NEWID())) * 10000 AS NUMERIC(10,2)) AS ColNumeric,
    RAND(CHECKSUM(NEWID())) * 10000 AS ColFloat,
    RAND(CHECKSUM(NEWID())) * 10000 AS ColReal,
    CAST(RAND(CHECKSUM(NEWID())) * 10000 AS MONEY) AS ColMoney,
    CAST(RAND(CHECKSUM(NEWID())) * 10000 AS SMALLMONEY) AS ColSmallMoney,
    LEFT(CAST(NEWID() AS VARCHAR(36)), 10) AS ColChar,
    'Texto-' + CAST(N AS VARCHAR(45)) AS ColVarChar,
    'Texto largo ' + REPLICATE('Lorem ipsum ', 10) AS ColText,
    LEFT(CAST(NEWID() AS NVARCHAR(36)), 10) AS ColNChar,
    N'Unicode-' + CAST(N AS NVARCHAR(45)) AS ColNVarChar,
    N'Texto Unicode largo ' + REPLICATE(N'Lorem ipsum ', 10) AS ColNText,
    CAST(NEWID() AS VARBINARY(5)) AS ColBinary,
    CAST(NEWID() AS VARBINARY(50)) AS ColVarBinary,
    CAST(NEWID() AS VARBINARY(MAX)) AS ColImage,
    DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 3650, '2014-01-01') AS ColDate,
    DATEADD(SECOND, ABS(CHECKSUM(NEWID())) % 7776000, '2014-01-01') AS ColDateTime,
    DATEADD(MINUTE, ABS(CHECKSUM(NEWID())) % 129600, '2014-01-01') AS ColSmallDateTime,
    DATEADD(SECOND, ABS(CHECKSUM(NEWID())) % 7776000, '2014-01-01') AS ColDateTime2,
    DATEADD(MILLISECOND, ABS(CHECKSUM(NEWID())) % 86400000, '00:00:00') AS ColTime,
    DATEADD(MINUTE, ABS(CHECKSUM(NEWID())) % 129600, '2014-01-01') AT TIME ZONE 'UTC' AS ColDateTimeOffset,
    ABS(CHECKSUM(NEWID())) % 2 AS ColBit,
    g.GuidValue AS ColUniqueIdentifier,
    (SELECT 'tag' + CAST(ABS(CHECKSUM(NEWID())) % 100 AS VARCHAR(3)) AS "@tag",
            'value' + CAST(ABS(CHECKSUM(NEWID())) % 100 AS VARCHAR(3)) AS "text"
     FOR XML PATH('root'), TYPE) AS ColXml,
    '{
        "id": ' + CAST(N AS VARCHAR(10)) + ',
        "value": "' + CAST(ABS(CHECKSUM(NEWID())) % 1000 AS VARCHAR(10)) + '",
        "name": "Item ' + CAST(N AS VARCHAR(10)) + '"
    }' AS ColJson
FROM Numbers n
CROSS APPLY (SELECT GuidValue FROM TempGuids WHERE Id = n.N) g;

-- Limpiar la tabla temporal
DROP TABLE TempGuids;